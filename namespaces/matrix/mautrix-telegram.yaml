podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"

config:
  bridge:
    permissions:
      "@halkeye:g4v.dev": admin
      "@alexleekt:g4v.dev": full
      g4v.dev: user
  # Homeserver details
  homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: https://matrix.g4v.dev
    # The domain of the homeserver (for MXIDs, etc).
    domain: g4v.dev
    # Whether or not to verify the SSL certificate of the homeserver.
    # Only applies if address starts with https://
    verify_ssl: true
  logging:
    loggers:
      aiohttp:
        level: ERROR

  # Application service host/registration related details
  # Changing these values requires regeneration of the registration.
  appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://mautrix-telegram.matrix.svc.cluster.local:29317

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29317
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are fully supported.
    # Other DBMSes supported by SQLAlchemy may or may not work.
    # Format examples:
    #   SQLite:   sqlite:///filename.db
    #   Postgres: postgres://username:password@hostname/dbname

    # Public part of web server for out-of-Matrix interaction with the bridge.
    # Used for things like login if the user wants to make sure the 2FA password isn't stored in
    # the HS database.
    public:
      # Whether or not the public-facing endpoints should be enabled.
      enabled: false
      # The prefix to use in the public-facing endpoints.
      prefix: /telegram
      # The base URL where the public-facing endpoints are available. The prefix is not added
      # implicitly.
      external: https://matrix.g4v.dev/telegram

    # Provisioning API part of the web server for automated portal creation and fetching information.
    # Used by things like Dimension (https://dimension.t2bot.io/).
    provisioning:
      # Whether or not the provisioning API should be enabled.
      enabled: true
      # The prefix to use in the provisioning API endpoints.
      prefix: /_matrix/provision/v1
      # The shared secret to authorize users of the API.
      # Set to "generate" to generate and save a new token.

    # The unique ID of this appservice.
    id: telegram
    # Username of the appservice bot.
    bot_username: telegrambot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Telegram bridge bot
    bot_avatar: mxc://maunium.net/tJCRmUyJDsgRNgqhOgoiHWbX

    # Community ID for bridged users (changes registration file) and rooms.
    # Must be created manually.
    community_id: false

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.

registration:
  id: telegram
  namespaces:
    users:
      - exclusive: true
        regex: "@telegram_.+:g4v.dev"
    aliases:
      - exclusive: true
        regex: "#telegram_.+:g4v.dev"
  url: http://mautrix-telegram.matrix.svc.cluster.local:29317
  sender_localpart: telegrambot
  rate_limited: false
