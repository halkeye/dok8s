---
persistence:
  enabled: true

controller:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - jenkins
          topologyKey: "kubernetes.io/hostname"
  jenkinsAdminEmail: jenkins@g4v.dev
  serviceType: ClusterIP
  serviceAnnotations:
    prometheus.io/path: /prometheus
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  image: halkeye/jenkins
  tag: "latest@sha256:36ee5059c32101ca5e0f5dae56222951b2a0b9210a71005a1529ff63385f49d7"

  probes:
    startupProbe:
      failureThreshold: 40
    livenessProbe:
      failureThreshold: 40
    readinessProbe:
      failureThreshold: 40
  sidecars:
    configAutoReload:
      enabled: true

  resources:
    requests:
      cpu: "2000m"
      memory: "1000Mi"
    limits:
      cpu: "4000m"
      memory: "4096Mi"

  ingress:
    enabled: true
    hostName: ci.g4v.dev
    ingressClassName: nginx
    path: /
    tls:
      - secretName: ci-tls
        hosts:
          - ci.g4v.dev
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 2000m
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

  numExecutors: 0
  overwriteConfig: false
  overwritePlugins: true
  installPlugins: false

  runAsUser: 1000
  fsGroup: 1000

  JCasC:
    defaultConfig: false
    configScripts:
      system-settings: |
        unclassified:
          defaultFolderConfiguration:
            # Keep healthMetrics an empty list to ensure weather is disabled
            healthMetrics: []
        jenkins:
          quietPeriod: 0 # No need to wait between build scheduling
          disabledAdministrativeMonitors:
            - "jenkins.security.QueueItemAuthenticatorMonitor"
      pipeline-settings: |
        unclassified:
          #timestamper:
          #  allPipelines: true
          shell:
            shell: "/bin/sh"
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "GROUP:Overall/Read:authenticated"
                - "USER:Agent/Build:anonymous"
                - "USER:Job/Discover:anonymous"
                - "USER:Job/Read:anonymous"
                - "USER:Overall/Read:anonymous"
                - "USER:Overall/Administer:halkeye"
      security: |
        jenkins:
          disableRememberMe: false
          markupFormatter: "markdownFormatter"
          securityRealm:
            oic:
              authorizationServerUrl: "https://auth.g4v.dev/application/o/authorize/"
              clientId: "${OIC_AUTH_CLIENT_ID}"
              clientSecret: "${OIC_AUTH_CLIENT_SECRET}"
              disableSslVerification: false
              endSessionEndpoint: "https://auth.g4v.dev/if/session-end/jenkins/"
              escapeHatchEnabled: false
              logoutFromOpenidProvider: true
              scopes: "email groups openid profile"
              tokenServerUrl: "https://auth.g4v.dev/application/o/token/"
              userInfoServerUrl: "https://auth.g4v.dev/application/o/userinfo/"
              wellKnownOpenIDConfigurationUrl: "https://auth.g4v.dev/application/o/jenkins/.well-known/openid-configuration"
              userNameField: "preferred_username"
              emailFieldName: "email"
              fullNameFieldName: "name"
              groupsFieldName: "groups"
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - gitHubApp:
                    appID: "74743"
                    description: "GitHub app - github-app"
                    id: "github-app"
                    privateKey: "${GITHUB_APP_KEY}"
                    owner: "halkeye"
                - gitHubApp:
                    appID: "74743"
                    description: "GitHub app - github-app-halkeye"
                    id: "github-app-halkeye"
                    privateKey: "${GITHUB_APP_KEY}"
                    owner: "halkeye"
                - gitHubApp:
                    appID: "74743"
                    description: "GitHub app - github-app-halkeye-docker"
                    id: "github-app-halkeye-docker"
                    privateKey: "${GITHUB_APP_KEY}"
                    owner: "halkeye-docker"
                - gitHubApp:
                    appID: "74743"
                    description: "GitHub app - github-app-halkeye-helm-charts"
                    id: "github-app-halkeye-helm-charts"
                    privateKey: "${GITHUB_APP_KEY}"
                    owner: "halkeye-helm-charts"
                - usernamePassword:
                    id: dockerhub-halkeye
                    description: dockerhub-halkeye
                    username: "${DOCKERHUB_HALKEYE_USERNAME}"
                    password: "${DOCKERHUB_HALKEYE_PASSWORD}"
                - string:
                    id: modio-halkeye
                    description: modio-halkeye
                    secret: "${MODIO_HALKEYE_ACCESS_TOKEN}"
                - string:
                    id: halkeye-digitalocean
                    description: halkeye-digitalocean
                    secret: "${DIGITAL_OCEAN_TOKEN}"
                - basicSSHUserPrivateKey:
                    id: halkeye-digitalocean-sshkey
                    description: halkeye-digitalocean-sshkey
                    privateKeySource:
                      directEntry:
                        privateKey: "${DIGITAL_OCEAN_SSH_KEY}"
                - file:
                    fileName: "kubeconfig"
                    id: "halkeye-digitalocean-kubeconfig"
                    description: "Kubeconfig file for dok8s"
                    scope: GLOBAL
                    secretBytes: "${base64:${DIGITAL_OCEAN_KUBECONFIG}}"
                - string:
                    id: github-admin-halkeye
                    description: github-admin-halkeye
                    secret: "${GITHUB_ADMIN_HALKEYE_SECRET}"
                - usernamePassword:
                    id: github-halkeye
                    description: github-halkeye
                    username: "${GITHUB_HALKEYE_USERNAME}"
                    password: "${GITHUB_HALKEYE_PASSWORD}"
                - string:
                    id: github-halkeye-react-book-reader
                    description: github-halkeye-react-book-reader
                    secret: "${GITHUB_HALKEYE_REACT_BOOK_READER_SECRET}"
                - usernamePassword:
                    id: goodreads
                    description: goodreads
                    username: "${GOODREADS_USERNAME}"
                    password: "${GOODREADS_PASSWORD}"
                - usernamePassword:
                    id: halkeye-quay
                    description: halkeye-quay
                    username: "${HALKEYE_QUAY_USERNAME}"
                    password: "${HALKEYE_QUAY_PASSWORD}"
                - usernamePassword:
                    id: halkeye-surge
                    description: halkeye-surge
                    username: "${HALKEYE_SURGE_USERNAME}"
                    password: "${HALKEYE_SURGE_PASSWORD}"
                - string:
                    id: netlify-gavinmogan
                    description: netlify-gavinmogan
                    secret: "${GITHUB_NETLIFY_GAVINMOGAN_SECRET}"
                - usernamePassword:
                    id: sauce-minecraft-gavinmogan
                    description: sauce-minecraft-gavinmogan
                    username: "${SAUCE_MINECRAFT_GAVINMOGAN_USERNAME}"
                    password: "${SAUCE_MINECRAFT_GAVINMOGAN_PASSWORD}"
                - basicSSHUserPrivateKey:
                    id: thor-ssh-key
                    description: thor-ssh-key
                    username: "jenkins"
                    privateKeySource:
                      directEntry:
                        privateKey: "${THOR_SSH_KEY}"
                - file:
                    # gpg -a --export-secret-keys jenkins@g4v.dev
                    id: jenkins-gpg-secret
                    description: jenkins-gpg-secret
                    fileName: key.asc
                    scope: GLOBAL
                    description: "GPG data for jenkins@g4v.dev"
                    secretBytes: "${readFileBase64:/run/secrets/additional/JENKINS_GPG_SECRET}"
                - file:
                    # gpg --export-ownertrust
                    id: jenkins-gpg-ownertrust
                    description: jenkins-gpg-ownertrust
                    fileName: ownertrust.asc
                    scope: GLOBAL
                    description: "GPG ownertrust data for jenkins@g4v.dev"
                    secretBytes: "${readFileBase64:/run/secrets/additional/JENKINS_GPG_OWNERTRUST}"
                - string:
                    id: jenkins-gpg-passphrase
                    description: jenkins-gpg-passphrase
                    secret: "${JENKINS_GPG_PASSPHRASE}"
                - string:
                    id: discord-webhook
                    description: discord-webhook
                    secret: "${DISCORD_WEBHOOK}"
                - string:
                    id: halkeye-crates
                    description: halkeye-crates
                    secret: "${CARGO_REGISTRY_TOKEN}"
                - string:
                    id: npm-halkeye-ci
                    description: npm-halkeye-ci
                    secret: "${NPM_HALKEYE_CI}"
                - file:
                    id: ansible-vault
                    description: ansible-vault
                    fileName: ".vault"
                    scope: GLOBAL
                    secretBytes: "${readFileBase64:/run/secrets/additional/ANSIBLE_KEY}"
                - basicSSHUserPrivateKey:
                    id: ansible-ssh-key
                    description: ansible-ssh-key
                    username: "jenkins"
                    privateKeySource:
                      directEntry:
                        privateKey: "${ANSIBLE_SSH_KEY}"
      zzzcustom: |-
        jenkins:
          numExecutors: 0
          nodes:
            - permanent:
                name: "thor"
                labelString: "home node linux"
                numExecutors: 4
                nodeProperties:
                - envVars:
                    env:
                    - key: "PATH"
                      value: "/home/jenkins-agent/go/bin:/home/jenkins-agent/.asdf/shims:/home/jenkins-agent/.asdf/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/local/go/bin"
                remoteFS: "/home/jenkins-agent"
                launcher:
                  inbound:
                    webSocket: true
                    workDirSettings:
                      disabled: false
                      failIfWorkDirIsMissing: false
                      internalDir: "remoting"
                retentionStrategy: "always"
          clouds: []
          #clouds:
          #  - digitalOcean:
          #      authTokenCredentialId: halkeye-digitalocean
          #      privateKeyCredentialId: halkeye-digitalocean-sshkey
          #      connectionRetryWait: 10
          #      instanceCap: 5
          #      name: "dojenkins"
          #      sshKeyId: 29638582
          #      templates:
          #      - idleTerminationInMinutes: 10
          #        installMonitoring: false
          #        instanceCap: 5
          #        labellessJobsAllowed: true
          #        #  doctl compute image list --public | grep -i docker | grep 20.04
          #        # 87786318     Docker 19.03.12 on Ubuntu 20.04
          #        imageId: "87786318"
          #        name: "agent"
          #        numExecutors: 2
          #        regionId: "tor1"
          #        setupPrivateNetworking: false
          #        sizeId: "s-2vcpu-2gb"
          #        sshPort: 22
          #        username: "root"
          #        workspacePath: "/jenkins/"
          #      timeoutMinutes: 5
          #      usePrivateNetworking: false
        unclassified:
          location:
            adminAddress: "jenkins@g4v.dev"
            url: "https://ci.g4v.dev/"
          email-ext:
            defaultReplyTo: "jenkins@g4v.dev"
            mailAccount:
              smtpPort: "587"
              smtpHost: "${SMTP_SERVER}"
          gitHubPluginConfig:
            configs:
              - credentialsId: "github-admin-halkeye"
            hookUrl: "https://ci.g4v.dev/github-webhook/"
          mailer:
            replyToAddress: "jenkins@g4v.dev"
            smtpHost: "${SMTP_SERVER}"
            smtpPort: "587"
          buildDiscarders:
            configuredBuildDiscarders:
              - "jobBuildDiscarder"
              - simpleBuildDiscarder:
                  discarder:
                    logRotator:
                      numToKeepStr: "5"
          globalDefaultFlowDurabilityLevel:
            durabilityHint: PERFORMANCE_OPTIMIZED
          globalLibraries:
            libraries:
              - name: "github.com/halkeye/jenkins-shared-library"
                implicit: true
                defaultVersion: "master"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        credentialsId: "github-app"
                        id: "29f65a8c-bc76-4fba-bddc-ac27fa04ccf4"
                        remote: "https://github.com/halkeye/jenkins-shared-library"
      jobs: |-
        jobs:
          - script: |-
              def githubOrgs = [
                "halkeye": [
                  "repos": [
                    "codacy-maven-plugin",
                    "discord-twitch-streamers",
                    "dok8s",
                    "EcoNextFoodPlugin",
                    "eslint-formatter-multiple",
                    "flask_atlassian_connect",
                    "GamesDealsBot",
                    "gatsby-jenkins-io",
                    "gatsby-source-goodreads",
                    "gatsby-theme-nodeschool",
                    "get_groups",
                    "git-version-commits",
                    "go_windows_stats",
                    "graphite_scripts",
                    "halkeye-ansible",
                    "helm-charts",
                    "helm-repo-html",
                    "helm-semantic-release-config",
                    "home-ansible",
                    "hubot-plugins",
                    "infinicatr",
                    "mastodon-twitter-poster",
                    "minecraft.gavinmogan.com",
                    "proxy-s3-google-oauth",
                    "react-book-reader",
                    "release-dashboard",
                    "slacktalker",
                    "soundboard",
                    "typos-json-to-checkstyle",
                    "typos-json-to-github-annotations",
                    "www-gavinmogan-com",
                  ]
                ],
                "nodeschool": [
                  "repos": [
                    "vancouver"
                  ]
                ],
                "halkeye-helm-charts": [],
                "halkeye-docker": [],
                "nodeschoolyvr": [],
              ]

              def appEnabledAccounts = ['halkeye', 'halkeye-helm-charts', 'halkeye-docker']

              githubOrgs.keySet().each { githubOrg ->

                organizationFolder(githubOrg) {
                  /*
                  if (githubOrgs[githubOrg]['allowed_read_users']) {
                    def perms = []
                    githubOrgs[githubOrg]['allowed_read_users'].each { user ->
                      perms.add('USER:hudson.model.Item.Read:' + user)
                      perms.add('USER:hudson.model.Item.Discover:' + user)
                    }
                    properties {
                      authorizationMatrix {
                        inheritanceStrategy {
                          nonInheriting()
                        }
                        permissions(perms)
                      }
                    }
                  }
                  */
                  buildStrategies {
                    buildAnyBranches {
                      strategies {
                        buildRegularBranches()
                        buildChangeRequests {
                          ignoreTargetOnlyChanges(false)
                          ignoreUntrustedChanges(false)
                        }
                        buildNamedBranches {
                          filters {
                            regex {
                              regex('^(main|master|gh-pages)$')
                              caseSensitive(true)
                            }
                          }
                        }
                        buildTags {
                          atLeastDays '-1'
                          atMostDays '3'
                        }
                      }
                    }
                  }
                  orphanedItemStrategy {
                    defaultOrphanedItemStrategy {
                      pruneDeadBranches(true)
                      numToKeepStr('5')
                      daysToKeepStr('')
                    }
                    discardOldItems {
                      numToKeep(5)
                    }
                  }
                  organizations {
                    github {
                      credentialsId(appEnabledAccounts.contains(githubOrg) ? 'github-app-' + githubOrg : 'github-halkeye')
                      repoOwner(githubOrg)
                      traits {
                        if (githubOrgs[githubOrg].repos) {
                          sourceRegexFilter { '^' + regex(githubOrgs[githubOrg].repos.join('|') + '$') }
                        }
                        pruneStaleBranchTrait()
                        gitHubExcludeArchivedRepositories()
                        gitHubBranchDiscovery {
                          strategyId(1) // 1-Exclude branches that are also filed as PRs
                        }
                        gitHubPullRequestDiscovery {
                          strategyId(1) // Merging the pull request with the current target branch revision
                        }
                        gitHubTagDiscovery()
                        pullRequestLabelsBlackListFilterTrait {
                          labels('on-hold ci-skip skip-ci')
                        }
                        notificationContextTrait {
                          contextLabel('continuous-integration/ci.g4v.dev')
                          typeSuffix(true)
                        }
                      }
                    }
                  }
                }
              }

rbac:
  create: true
  readSecrets: true
